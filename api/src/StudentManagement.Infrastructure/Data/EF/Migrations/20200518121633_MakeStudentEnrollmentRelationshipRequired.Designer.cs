// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagement.Infrastructure.Data.EF;

namespace StudentManagement.Infrastructure.Data.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200518121633_MakeStudentEnrollmentRelationshipRequired")]
    partial class MakeStudentEnrollmentRelationshipRequired
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("StudentManagement.Domain.Courses.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("StudentManagement.Domain.Students.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("varchar(1) CHARACTER SET utf8mb4")
                        .HasMaxLength(1);

                    b.Property<Guid>("StudentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("StudentManagement.Domain.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentManagement.Domain.Courses.Course", b =>
                {
                    b.OwnsOne("StudentManagement.Domain.Courses.CourseTitle", "Title", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Title")
                                .HasColumnName("Title")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("CourseId");

                            b1.ToTable("Courses");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("StudentManagement.Domain.Courses.Credits", "Credits", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("Amount")
                                .HasColumnName("Credits")
                                .HasColumnType("int");

                            b1.HasKey("CourseId");

                            b1.ToTable("Courses");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });
                });

            modelBuilder.Entity("StudentManagement.Domain.Students.Enrollment", b =>
                {
                    b.HasOne("StudentManagement.Domain.Students.Student", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentManagement.Domain.Students.Student", b =>
                {
                    b.OwnsOne("StudentManagement.Domain.Students.EmailAddress", "Email", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Address")
                                .HasColumnName("Email")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.OwnsOne("StudentManagement.Domain.Students.StudentName", "Name", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Name")
                                .HasColumnName("Name")
                                .HasColumnType("longtext CHARACTER SET utf8mb4");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
